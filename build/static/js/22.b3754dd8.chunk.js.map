{"version":3,"sources":["views/app-views/settings/index.js"],"names":["Settings","useSelector","state","settings","data","error","loading","delete","success","fileList","shallowEqual","TabPane","Tabs","dispatch","useDispatch","confirm","Modal","useEffect","getWithdrawalSettingsInit","openNotificationError","errorMessage","args","message","description","duration","notification","open","defaultActiveKey","tab","span","title","name","labelCol","wrapperCol","initialValues","percentage","tax","onFinish","content","onOk","setWithdrawalPercentageInit","onCancel","onFinishFailed","autoComplete","Item","label","rules","required","formatter","value","parser","replace","style","width","max","offset","type","htmlType"],"mappings":"iIAAA,mIA8QeA,UApPE,WACf,MAQIC,aACF,SAACC,GAAD,MAAY,CACVC,SAAUD,EAAMC,SAASC,KACzBC,MAAOH,EAAMC,SAASE,MACtBC,QAASJ,EAAMC,SAASG,QACxBC,OAAQL,EAAMC,SAASI,OACvBC,QAASN,EAAMC,SAASK,QACxBC,SAAU,MAOZC,KArBAP,EADF,EACEA,SACAE,EAFF,EAEEA,MACAC,EAHF,EAGEA,QACAE,EAJF,EAIEA,QAoBMG,EAAYC,IAAZD,QACFE,EAAWC,cACTC,EAAYC,IAAZD,QACRE,qBAAU,WACRJ,EAASK,iBAER,CAACL,IAEJ,IAAMM,EAAwB,SAACC,GAC7B,IAAMC,EAAO,CACXC,QAAS,QACTC,YAAY,GAAD,OAAKH,GAChBI,SAAU,GAEZC,IAAaC,KAAKL,IA+GpB,OA7GIhB,GACFc,EAAsBd,IAER,IAAZG,GACFc,IAAQd,QAAQ,qCA0GhB,8BACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAMmB,iBAAiB,IAAvB,SACE,cAAChB,EAAD,CAASiB,IAAI,iBAAb,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,KAAM,GAAX,SACE,eAAC,IAAD,CAAMC,MAAM,qBAAqBxB,QAASA,EAA1C,UACE,eAAC,IAAD,CACEyB,KAAK,QACLC,SAAU,CAAEH,KAAM,GAClBI,WAAY,CAAEJ,KAAM,IACpBK,cAAe,CACbC,WAAYhC,EAASgC,WACrBC,IAAKjC,EAASiC,KAEhBC,SA5FlB,SAA4BjC,GAC1BW,EAAQ,CACNe,MAAM,gEAAD,OAAkE1B,EAAK+B,WAAvE,qBAA8F/B,EAAKgC,IAAnG,KACLE,QACE,0JACFC,KAJM,YAWV,SAAkBnC,GAChB,GAAIA,EAAK+B,WAAa/B,EAAKgC,IAAM,GAC/B,OAAOd,IAAQjB,MACb,wDAGJQ,EAAS2B,YAA4BpC,IAZjCiC,CAASjC,IAEXqC,SAPM,gBA4FQC,eAzElB,SAAwBrC,GACtBc,EAAsBd,IAyENsC,aAAa,MAVf,UAYE,cAAC,IAAKC,KAAN,CACEC,MAAM,mBACNd,KAAK,aACLe,MAAO,CACL,CACEC,UAAU,EACVzB,QAAS,4BANf,SAUE,cAAC,IAAD,CACE0B,UAAW,SAACC,GAAD,gBAAcA,EAAd,MACXC,OAAQ,SAACD,GAAD,OAAWA,EAAME,QAAQ,IAAK,KACtCC,MAAO,CAAEC,MAAO,SAChBC,IAAK,OAGT,cAAC,IAAKV,KAAN,CAAWC,MAAM,MAAMd,KAAK,MAA5B,SACE,cAAC,IAAD,CACEiB,UAAW,SAACC,GAAD,gBAAcA,EAAd,MACXC,OAAQ,SAACD,GAAD,OAAWA,EAAME,QAAQ,IAAK,KACtCC,MAAO,CAAEC,MAAO,SAChBC,IAAK,OAGT,cAAC,IAAKV,KAAN,CAAWX,WAAY,CAAEsB,OAAQ,EAAG1B,KAAM,IAA1C,SACE,cAAC,IAAD,CAAQ2B,KAAK,UAAUC,SAAS,SAAhC,yBAKJ,kHA/C0B","file":"static/js/22.b3754dd8.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  Row,\r\n  Col,\r\n  InputNumber,\r\n  Form,\r\n  Button,\r\n  Modal,\r\n  message,\r\n  notification,\r\n  Tabs,\r\n  //Table,\r\n // Space,\r\n} from \"antd\";\r\n//import AvatarStatus from \"components/shared-components/AvatarStatus\";\r\n//import Flex from \"components/shared-components/Flex\";\r\n//import { PlusOutlined, EditOutlined, DeleteOutlined } from \"@ant-design/icons\";\r\nimport { shallowEqual, useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n // deleteImageCarouselInit,\r\n//  getImageCarouselInit,\r\n  getWithdrawalSettingsInit,\r\n  setWithdrawalPercentageInit,\r\n} from \"redux/actions/SettingsActions\";\r\n//import { Link, useHistory } from \"react-router-dom\";\r\nconst Settings = () => {\r\n  const {\r\n    settings,\r\n    error,\r\n    loading,\r\n    success,\r\n  //  imageCarouselData,\r\n  //  getImageCarouselLoading,\r\n  //  deleteImageCarouselSuccess,\r\n  } = useSelector(\r\n    (state) => ({\r\n      settings: state.settings.data,\r\n      error: state.settings.error,\r\n      loading: state.settings.loading,\r\n      delete: state.settings.delete,\r\n      success: state.settings.success,\r\n      fileList: [],\r\n    //  imageCarouselData: state.settings.imageCarouselData,\r\n    //  getImageCarouselLoading: state.settings.getImageCarouselLoading,\r\n    //  getImageCarouselError: state.settings.getImageCarouselError,\r\n    //  getImageCarouselSuccess: state.settings.getImageCarouselSuccess,\r\n  //    deleteImageCarouselSuccess: state.settings.deleteImageCarouselSuccess,\r\n    }),\r\n    shallowEqual\r\n  );\r\n  const { TabPane } = Tabs;\r\n  const dispatch = useDispatch();\r\n  const { confirm } = Modal;\r\n  useEffect(() => {\r\n    dispatch(getWithdrawalSettingsInit());\r\n  //  dispatch(getImageCarouselInit());\r\n  }, [dispatch]);\r\n  //const history = useHistory();\r\n  const openNotificationError = (errorMessage) => {\r\n    const args = {\r\n      message: \"Error\",\r\n      description: `${errorMessage}`,\r\n      duration: 0,\r\n    };\r\n    notification.open(args);\r\n  };\r\n  if (error) {\r\n    openNotificationError(error);\r\n  }\r\n  if (success === true) {\r\n    message.success(\"Success set withdrawal percentage\");\r\n  }\r\n  /*\r\n  if (deleteImageCarouselSuccess === true) {\r\n    message.success(\"Success delete image carousel\");\r\n  }\r\n\r\n  function showConfirmDelete(imageId, imageUrl) {\r\n    confirm({\r\n      title: `Are you sure you want to delete this image`,\r\n      content:\r\n        \"this image will be deleted from the list of carousel images seen by the client\",\r\n      onOk() {\r\n        onImageDeleted(imageId, imageUrl);\r\n      },\r\n      onCancel() {},\r\n    });\r\n  }\r\n  const onImageDeleted = async (imageId, imageUrl) => {\r\n    console.log(\r\n      \"ðŸš€ ~ file: index.js ~ line 73 ~ onImageDeleted ~ values\",\r\n      imageId,\r\n      imageUrl\r\n    );\r\n   // let imageData = { imageId, imageUrl };\r\n   // dispatch(deleteImageCarouselInit(imageData));\r\n  \r\n  };\r\n */\r\n  function showPromiseConfirm(data) {\r\n    confirm({\r\n      title: `Are you sure you want to set the withdrawal percentage to be ${data.percentage}% and tax ${data.tax}%`,\r\n      content:\r\n        \"This number will be seen by the doctor when withdrawing funds, the higher the percentage you take, the more likely the doctor will not be happy with it\",\r\n      onOk() {\r\n        onFinish(data);\r\n      },\r\n      onCancel() {},\r\n    });\r\n  }\r\n\r\n  function onFinish(data) {\r\n    if (data.percentage + data.tax > 99) {\r\n      return message.error(\r\n        \"The percentage amount taken and the tax exceeds 100%\"\r\n      );\r\n    }\r\n    dispatch(setWithdrawalPercentageInit(data));\r\n  }\r\n  function onFinishFailed(error) {\r\n    openNotificationError(error);\r\n  }\r\n/*\r\n  const columns = [\r\n    {\r\n      title: \"Image\",\r\n      dataIndex: \"imageUrl\",\r\n      key: \"name\",\r\n      render: (_, record) => (\r\n        <Flex>\r\n          <AvatarStatus\r\n            size={30}\r\n            src={record.imageUrl}\r\n            name={record.fileName}\r\n          />\r\n        </Flex>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Image File Name\",\r\n      dataIndex: \"fileName\",\r\n      key: \"fileName\",\r\n    },\r\n    {\r\n      title: \"Date Added\",\r\n      dataIndex: \"createdAt\",\r\n      key: \"dateAdded\",\r\n    },\r\n    {\r\n      title: \"Action\",\r\n      dataIndex: \"\",\r\n      key: \"x\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <Button\r\n            icon={<EditOutlined />}\r\n            shape=\"circle\"\r\n            onClick={() =>\r\n              history.push({\r\n                pathname:\r\n                  `new-image-carousel` + record.id + \"/\" + record.categoryName,\r\n              })\r\n            }\r\n          ></Button>\r\n          <Button\r\n            onClick={() => showConfirmDelete(record.id, record.imageUrl)}\r\n            icon={<DeleteOutlined />}\r\n            shape=\"circle\"\r\n          />\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  */\r\n  return (\r\n    <div>\r\n      <Card>\r\n        <Tabs defaultActiveKey=\"1\">\r\n          <TabPane tab=\"Admin Settings\" key=\"1\">\r\n            <Row>\r\n              <Col span={12}>\r\n                <Card title=\"Withdrawal Setting\" loading={loading}>\r\n                  <Form\r\n                    name=\"basic\"\r\n                    labelCol={{ span: 8 }}\r\n                    wrapperCol={{ span: 16 }}\r\n                    initialValues={{\r\n                      percentage: settings.percentage,\r\n                      tax: settings.tax,\r\n                    }}\r\n                    onFinish={showPromiseConfirm}\r\n                    onFinishFailed={onFinishFailed}\r\n                    autoComplete=\"off\"\r\n                  >\r\n                    <Form.Item\r\n                      label=\"Percentage Taken\"\r\n                      name=\"percentage\"\r\n                      rules={[\r\n                        {\r\n                          required: true,\r\n                          message: \"Please input the number\",\r\n                        },\r\n                      ]}\r\n                    >\r\n                      <InputNumber\r\n                        formatter={(value) => `${value}%`}\r\n                        parser={(value) => value.replace(\"%\", \"\")}\r\n                        style={{ width: \" 20% \" }}\r\n                        max={99}\r\n                      />\r\n                    </Form.Item>\r\n                    <Form.Item label=\"Tax\" name=\"tax\">\r\n                      <InputNumber\r\n                        formatter={(value) => `${value}%`}\r\n                        parser={(value) => value.replace(\"%\", \"\")}\r\n                        style={{ width: \" 20% \" }}\r\n                        max={99}\r\n                      />\r\n                    </Form.Item>\r\n                    <Form.Item wrapperCol={{ offset: 8, span: 16 }}>\r\n                      <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </Form>\r\n                  <p>\r\n                    * the percentage that will be deducted when the doctor makes\r\n                    a withdrawal\r\n                  </p>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n          {/*\r\n          <TabPane tab=\"Client Settings\" key=\"2\">\r\n            <Row>\r\n              <Col span={16}>\r\n                <Card\r\n                  title=\"Image Carousel\"\r\n                  loading={getImageCarouselLoading}\r\n                  extra={\r\n                    <Space>\r\n                      <Button icon={<PlusOutlined />}>\r\n                        <Link to={\"new-image-carousel\"}>\r\n                          Add Image Carousel\r\n                        </Link>\r\n                      </Button>\r\n                    </Space>\r\n                  }\r\n                >\r\n                  <Table\r\n                    pagination={false}\r\n                    columns={columns}\r\n                    dataSource={imageCarouselData}\r\n                    rowKey=\"id\"\r\n                    loading={loading}\r\n                  />\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </TabPane>\r\n                */}\r\n        </Tabs>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n"],"sourceRoot":""}