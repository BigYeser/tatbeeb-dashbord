{"version":3,"sources":["utils/validation/DoctorCategoryValidation.js","views/app-views/new-doctor-category/index.js"],"names":["doctorCategorySchema","yup","shape","categoryName","required","iconUrl","url","doctorCategorySchemaEditing","NewDoctorCategory","history","useHistory","useParams","id","name","translation","isEditing","useMemo","Form","useForm","form","onFinish","values","a","categoryTranslation","category_icon","validate","FirebaseService","editDoctorCategory","push","uploadImage","file","fileList","originFileObj","message","error","labelCol","span","wrapperCol","scrollToFirstError","labelAlign","initialValues","Item","label","rules","listType","multiple","maxCount","beforeUpload","isJpgOrPng","type","isLt2M","size","icon","UploadOutlined","offset","htmlType"],"mappings":"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","file":"static/js/8.2b5c5d69.chunk.js","sourcesContent":["import * as yup from \"yup\";\r\n\r\nexport const doctorCategorySchema = yup.object().shape({\r\n  categoryName: yup.string().required(),\r\n  iconUrl: yup.string().url().required(),\r\n});\r\n\r\nexport const doctorCategorySchemaEditing = yup.object().shape({\r\n  categoryName: yup.string().required(),\r\n});\r\n","import { useMemo } from \"react\";\r\nimport { Card, Form, Input, Button, Upload, message } from \"antd\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport FirebaseService from \"services/FirebaseService\";\r\nimport {\r\n  doctorCategorySchema,\r\n  doctorCategorySchemaEditing,\r\n} from \"utils/validation/DoctorCategoryValidation\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst NewDoctorCategory = () => {\r\n  const history = useHistory();\r\n  const { id, name, translation} = useParams();\r\n  const isEditing = useMemo(() => !!id, [id]);\r\n  const [form] = Form.useForm();\r\n  const onFinish = async (values) => {\r\n    try {\r\n      if (isEditing) {\r\n        const form = {\r\n          categoryName: values.categoryName,\r\n          categoryTranslation: values.categoryTranslation,\r\n          iconUrl: values.category_icon,\r\n        };\r\n        const isValid = await doctorCategorySchemaEditing.validate(form);\r\n        if (isValid) {\r\n          if (!values.category_icon) {\r\n            await FirebaseService.editDoctorCategory(\r\n              id,\r\n              values.categoryName,\r\n              values.categoryTranslation,\r\n              null\r\n            );\r\n            history.push(\"/app/doctor-category\");\r\n          } else {\r\n            let iconUrl = await FirebaseService.uploadImage(\r\n              values.category_icon.file.name,\r\n              values.category_icon.fileList[0].originFileObj\r\n            );\r\n            const form = { categoryName: values.categoryName, categoryTranslation: values.categoryTranslation, iconUrl };\r\n            await FirebaseService.editDoctorCategory(\r\n              id,\r\n              form.categoryName,\r\n              form.categoryTranslation,\r\n              form.iconUrl\r\n            );\r\n\r\n            history.push(\"/app/doctor-category\");\r\n          }\r\n        }\r\n      } else {\r\n        let iconUrl = await FirebaseService.uploadImage(\r\n          values.category_icon.file.name,\r\n          values.category_icon.fileList[0].originFileObj\r\n        );\r\n\r\n        const form = {\r\n          categoryName: values.categoryName,\r\n          categoryTranslation: values.categoryTranslation,\r\n          iconUrl,\r\n        };\r\n        const isValid = await doctorCategorySchema.validate(form);\r\n        if (isValid) {\r\n          await FirebaseService.editDoctorCategory(\r\n            id,\r\n            form.categoryName,\r\n            form.categoryTranslation,\r\n            form.iconUrl\r\n          );\r\n          history.push(\"/app/doctor-category\");\r\n        }\r\n      }\r\n    } catch (error) {\r\n      message.error(\"error : \" + error.message);\r\n    }\r\n  };\r\n\r\n  function beforeUpload(file) {\r\n    const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\r\n    if (!isJpgOrPng) {\r\n      message.error(\"You can only upload JPG/PNG file!\");\r\n    }\r\n    const isLt2M = file.size / 1024 / 1024 < 2;\r\n    if (!isLt2M) {\r\n      message.error(\"Image must smaller than 2MB!\");\r\n    }\r\n    return isJpgOrPng && isLt2M && false;\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Form\r\n        labelCol={{ span: 3 }}\r\n        wrapperCol={{ span: 10 }}\r\n        form={form}\r\n        name=\"doctor_category_input\"\r\n        onFinish={onFinish}\r\n        scrollToFirstError\r\n        labelAlign=\"left\"\r\n        initialValues={{ categoryName: isEditing ? name : null , categoryTranslation:  isEditing ? translation : null}}\r\n      >\r\n       \r\n        <Form.Item\r\n          name=\"categoryName\"\r\n          label=\"Category Name\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please chose Category Name\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"categoryTranslation\"\r\n          label=\"Category in Arabic\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: \"Please chose Category in Arabic\",\r\n            },\r\n          ]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        \r\n        <Form.Item\r\n          name=\"category_icon\"\r\n          label=\"Category Icon\"\r\n          rules={[\r\n            {\r\n              required: isEditing ? false : true,\r\n              message: \"Please chose Category Icon\",\r\n            },\r\n          ]}\r\n        >\r\n          <Upload\r\n            name=\"logo\"\r\n            listType=\"picture\"\r\n            multiple\r\n            maxCount={1}\r\n            beforeUpload={beforeUpload}\r\n          >\r\n            <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n          </Upload>\r\n        </Form.Item>\r\n        <Form.Item\r\n          wrapperCol={{\r\n            offset: 3,\r\n            span: 16,\r\n          }}\r\n        >\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default NewDoctorCategory;\r\n"],"sourceRoot":""}